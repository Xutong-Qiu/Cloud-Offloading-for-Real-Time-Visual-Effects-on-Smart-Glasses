// Simple lit material that defines 3 parameters:
// - baseColor
// - roughness
// - metallic
//
// These parameters can be used by the application to change the appearance of the material.
//
// This source material must be compiled to a binary material using the matc tool.
// The command used to compile this material is:
// matc -p mobile -a opengl -o app/src/main/assets/lit.filamat app/src/materials/lit.mat
//
// See build.gradle for an example of how to compile materials automatically
// Please refer to the documentation for more information about matc and the materials system.

material {
    name : lit,

    // Dynamic lighting is enabled on this material
    shadingModel : lit,

    // We don't need to declare a "requires" array, lit materials
    // always requires the "tangents" vertex attribute (the normal
    // is required for lighting, tangent/bitangent for normal mapping
    // and anisotropy)

    // Custom vertex shader outputs
    variables : [
        uv
    ],

    // List of parameters exposed by this material
    parameters : [
        // The color must be passed in linear space, not sRGB
        {
            type : float4,
            name : baseColor
        },
        {
            type : float,
            name : roughness
        },
        {
            type : float,
            name : uvOffset
        },
        {
            type : samplerExternal,
            name : videoTexture
        },
        {
            type : mat4,
            name : textureTransform
        }
    ],
}

vertex {
    void materialVertex(inout MaterialVertexInputs material) {
        //material.uv = 0.5 * (getPosition() + vec4(1));
        material.uv.x = getPosition().x/0.8+0.5;
        material.uv.y = getPosition().y/0.9+0.5;
    }
}

fragment {



    vec2 parallaxmapping(vec3 viewDir){
        const float minLayers = 8.0;
        const float maxLayers = 60.0;
        float numLayers = mix(maxLayers, minLayers, max(dot(vec3(0.0, 0.0, 1.0), viewDir), 0.0));
        // calculate the size of each layer
        float layerDepth = 1.0 / numLayers;
        // depth of current layer
        float currentLayerDepth = 0.0;
        // the amount to shift the texture coordinates per layer (from vector P)
        vec2 P = viewDir.xy*0.1;
        vec2 deltaTexCoords = P / numLayers;

        vec2  currentTextureCoords     = variable_uv.xy;
        vec2 textureC =  vec2(currentTextureCoords.x/2.0 + 0.5, currentTextureCoords.y);
        float height = 1.0 - texture(materialParams_videoTexture, textureC).r;

        while(currentLayerDepth < height)
        {
            // shift texture coordinates along direction of P
            currentTextureCoords -= deltaTexCoords;
            // get depthmap value at current texture coordinates
            textureC =  vec2(currentTextureCoords.x/2.0 + 0.5, currentTextureCoords.y);
            height = 1.0 - texture(materialParams_videoTexture, textureC).r;
            // get depth of next layer
            currentLayerDepth += layerDepth;
        }



        return currentTextureCoords;
    }


    void material(inout MaterialInputs material) {
        prepareMaterial(material);
        material.roughness = materialParams.roughness;
        material.metallic = 0.0;

        vec3 worldPos = getWorldPosition();
        vec3 viewPos = getWorldViewVector();
        vec2 uv=parallaxmapping(viewPos);

        uv.x = uv.x * 0.5;
        vec4 color = texture(materialParams_videoTexture, uv).rgba;
        material.baseColor.rgb = inverseTonemapSRGB(color.rgb);


    }
}