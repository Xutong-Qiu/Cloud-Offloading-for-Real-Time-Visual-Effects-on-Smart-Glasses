// Simple lit material that defines 3 parameters:
// - baseColor
// - roughness
// - metallic
//
// These parameters can be used by the application to change the appearance of the material.
//
// This source material must be compiled to a binary material using the matc tool.
// The command used to compile this material is:
// matc -p mobile -a opengl -o app/src/main/assets/lit.filamat app/src/materials/lit.mat
//
// See build.gradle for an example of how to compile materials automatically
// Please refer to the documentation for more information about matc and the materials system.

material {
    name : lit,

    // Dynamic lighting is enabled on this material
    shadingModel : lit,

    // We don't need to declare a "requires" array, lit materials
    // always requires the "tangents" vertex attribute (the normal
    // is required for lighting, tangent/bitangent for normal mapping
    // and anisotropy)

    // Custom vertex shader outputs
    variables : [
        uv
    ],

    // List of parameters exposed by this material
    parameters : [
        // The color must be passed in linear space, not sRGB
        {
            type : float3,
            name : baseColor
        },
        {
            type : float,
            name : roughness
        },
        {
            type : float,
            name : uvOffset
        },
        {
            type : samplerExternal,
            name : videoTexture
        },
        {
            type : mat4,
            name : textureTransform
        }
    ],
}

vertex {
    void materialVertex(inout MaterialVertexInputs material) {
        //material.uv = 0.5 * (getPosition() + vec4(1));
        material.uv.x = getPosition().x/1.6+0.5;
        material.uv.y = getPosition().y/0.9+0.5;
    }
}

fragment {


    vec3 desaturate(vec3 color, float amount) {
        // Convert color to grayscale using Luma formula:
        // https://en.wikipedia.org/wiki/Luma_%28video%29
        vec3 gray = vec3(dot(vec3(0.2126, 0.7152, 0.0722), color));

        return vec3(mix(color, gray, amount));
    }

    void material(inout MaterialInputs material) {
        prepareMaterial(material);
        material.roughness = materialParams.roughness;
        material.metallic = 0.0;

        vec3 worldPos = getWorldPosition();
        vec3 worldNormal = vec3(1., 1., 1.);
        vec3 viewPos = getWorldViewVector();
        vec2 uv = (materialParams.textureTransform * vec4(variable_uv.xy, 0, 1)).xy;
        uv.y=1.0-uv.y;
        //uv.x = uv.x * 0.5;
        vec4 color = texture(materialParams_videoTexture, uv).rgba;


        material.baseColor.rgb = inverseTonemapSRGB(texture(materialParams_videoTexture, uv).rgb);

        // Apply the video stream to the +Z face on the cube.
        if (variable_uv.z >= 0.0) {


        } else {
            material.baseColor.rgb = materialParams.baseColor;
        }
    }
}